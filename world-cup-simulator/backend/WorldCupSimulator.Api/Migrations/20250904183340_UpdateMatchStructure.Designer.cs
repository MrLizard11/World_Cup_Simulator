// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorldCupSimulator.Api.Data;

#nullable disable

namespace WorldCupSimulator.Api.Migrations
{
    [DbContext(typeof(WorldCupContext))]
    [Migration("20250904183340_UpdateMatchStructure")]
    partial class UpdateMatchStructure
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WorldCupSimulator.Api.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("WorldCupSimulator.Api.Models.GroupTeam", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("Draws")
                        .HasColumnType("int");

                    b.Property<int>("GoalDifference")
                        .HasColumnType("int");

                    b.Property<int>("GoalsAgainst")
                        .HasColumnType("int");

                    b.Property<int>("GoalsFor")
                        .HasColumnType("int");

                    b.Property<int>("Losses")
                        .HasColumnType("int");

                    b.Property<int>("MatchesPlayed")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("GroupId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("GroupTeams");
                });

            modelBuilder.Entity("WorldCupSimulator.Api.Models.KnockoutStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("FinalMatchId")
                        .HasColumnType("int");

                    b.Property<int?>("ThirdPlaceMatchId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("KnockoutStages");
                });

            modelBuilder.Entity("WorldCupSimulator.Api.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("MatchType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<bool>("Played")
                        .HasColumnType("bit");

                    b.Property<int>("ScoreA")
                        .HasColumnType("int");

                    b.Property<int>("ScoreB")
                        .HasColumnType("int");

                    b.Property<int>("TeamAId")
                        .HasColumnType("int");

                    b.Property<int>("TeamBId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamAId");

                    b.HasIndex("TeamBId");

                    b.HasIndex("TeamId");

                    b.ToTable("Matches");

                    b.HasDiscriminator<string>("MatchType").HasValue("Match");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("WorldCupSimulator.Api.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Elo")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("WorldCupSimulator.Api.Models.GroupMatch", b =>
                {
                    b.HasBaseType("WorldCupSimulator.Api.Models.Match");

                    b.HasIndex("GroupId");

                    b.HasDiscriminator().HasValue("Group");
                });

            modelBuilder.Entity("WorldCupSimulator.Api.Models.KnockoutMatch", b =>
                {
                    b.HasBaseType("WorldCupSimulator.Api.Models.Match");

                    b.Property<int?>("FinalStageId")
                        .HasColumnType("int");

                    b.Property<int?>("PenaltyScoreA")
                        .HasColumnType("int");

                    b.Property<int?>("PenaltyScoreB")
                        .HasColumnType("int");

                    b.Property<int?>("QuarterFinalsStageId")
                        .HasColumnType("int");

                    b.Property<int>("Round")
                        .HasColumnType("int");

                    b.Property<int?>("RoundOf16StageId")
                        .HasColumnType("int");

                    b.Property<int?>("SemiFinalsStageId")
                        .HasColumnType("int");

                    b.Property<int?>("ThirdPlaceStageId")
                        .HasColumnType("int");

                    b.Property<bool>("WentToPenalties")
                        .HasColumnType("bit");

                    b.Property<string>("Winner")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("FinalStageId")
                        .IsUnique()
                        .HasFilter("[FinalStageId] IS NOT NULL");

                    b.HasIndex("GroupId");

                    b.HasIndex("QuarterFinalsStageId");

                    b.HasIndex("RoundOf16StageId");

                    b.HasIndex("SemiFinalsStageId");

                    b.HasIndex("ThirdPlaceStageId")
                        .IsUnique()
                        .HasFilter("[ThirdPlaceStageId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Knockout");
                });

            modelBuilder.Entity("WorldCupSimulator.Api.Models.GroupTeam", b =>
                {
                    b.HasOne("WorldCupSimulator.Api.Models.Group", "Group")
                        .WithMany("Teams")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorldCupSimulator.Api.Models.Team", "Team")
                        .WithMany("GroupTeams")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("WorldCupSimulator.Api.Models.Match", b =>
                {
                    b.HasOne("WorldCupSimulator.Api.Models.Team", "TeamA")
                        .WithMany()
                        .HasForeignKey("TeamAId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorldCupSimulator.Api.Models.Team", "TeamB")
                        .WithMany()
                        .HasForeignKey("TeamBId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorldCupSimulator.Api.Models.Team", null)
                        .WithMany("Matches")
                        .HasForeignKey("TeamId");

                    b.Navigation("TeamA");

                    b.Navigation("TeamB");
                });

            modelBuilder.Entity("WorldCupSimulator.Api.Models.GroupMatch", b =>
                {
                    b.HasOne("WorldCupSimulator.Api.Models.Group", "Group")
                        .WithMany("Matches")
                        .HasForeignKey("GroupId");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("WorldCupSimulator.Api.Models.KnockoutMatch", b =>
                {
                    b.HasOne("WorldCupSimulator.Api.Models.KnockoutStage", "FinalStage")
                        .WithOne("Final")
                        .HasForeignKey("WorldCupSimulator.Api.Models.KnockoutMatch", "FinalStageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WorldCupSimulator.Api.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.HasOne("WorldCupSimulator.Api.Models.KnockoutStage", "QuarterFinalsStage")
                        .WithMany("QuarterFinals")
                        .HasForeignKey("QuarterFinalsStageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WorldCupSimulator.Api.Models.KnockoutStage", "RoundOf16Stage")
                        .WithMany("RoundOf16")
                        .HasForeignKey("RoundOf16StageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WorldCupSimulator.Api.Models.KnockoutStage", "SemiFinalsStage")
                        .WithMany("SemiFinals")
                        .HasForeignKey("SemiFinalsStageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WorldCupSimulator.Api.Models.KnockoutStage", "ThirdPlaceStage")
                        .WithOne("ThirdPlaceMatch")
                        .HasForeignKey("WorldCupSimulator.Api.Models.KnockoutMatch", "ThirdPlaceStageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("FinalStage");

                    b.Navigation("Group");

                    b.Navigation("QuarterFinalsStage");

                    b.Navigation("RoundOf16Stage");

                    b.Navigation("SemiFinalsStage");

                    b.Navigation("ThirdPlaceStage");
                });

            modelBuilder.Entity("WorldCupSimulator.Api.Models.Group", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("WorldCupSimulator.Api.Models.KnockoutStage", b =>
                {
                    b.Navigation("Final");

                    b.Navigation("QuarterFinals");

                    b.Navigation("RoundOf16");

                    b.Navigation("SemiFinals");

                    b.Navigation("ThirdPlaceMatch");
                });

            modelBuilder.Entity("WorldCupSimulator.Api.Models.Team", b =>
                {
                    b.Navigation("GroupTeams");

                    b.Navigation("Matches");
                });
#pragma warning restore 612, 618
        }
    }
}
